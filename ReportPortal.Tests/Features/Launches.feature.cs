// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ReportPortal.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Launches Tests")]
    [NUnit.Framework.CategoryAttribute("Smoke")]
    [NUnit.Framework.CategoryAttribute("UI")]
    public partial class LaunchesTestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "Smoke",
                "UI"};
        
#line 1 "Launches.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Launches Tests", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01 Correct test run data id displayed for Launch")]
        [NUnit.Framework.CategoryAttribute("High")]
        [NUnit.Framework.CategoryAttribute("RP-15")]
        [NUnit.Framework.TestCaseAttribute("Admin", "Demo Api Tests#9", "25", "20", "5", "", "4", "1", "", "2", null)]
        [NUnit.Framework.TestCaseAttribute("Admin", "Demo Api Tests#7", "15", "5", "9", "1", "1", "5", "4", "8", null)]
        [NUnit.Framework.TestCaseAttribute("Default", "Demo Api Tests#10", "30", "30", "", "", "", "", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("Default", "Demo Api Tests#6", "10", "1", "9", "", "", "1", "8", "5", null)]
        [NUnit.Framework.TestCaseAttribute("Default", "Demo Api Tests#8", "20", "10", "8", "2", "4", "4", "", "10", null)]
        public void _01CorrectTestRunDataIdDisplayedForLaunch(string user, string launchName, string total, string passed, string failed, string skipped, string productBug, string autoBug, string systemIssue, string toInvestigate, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "High",
                    "RP-15"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("User", user);
            argumentsOfScenario.Add("Launch Name", launchName);
            argumentsOfScenario.Add("Total", total);
            argumentsOfScenario.Add("Passed", passed);
            argumentsOfScenario.Add("Failed", failed);
            argumentsOfScenario.Add("Skipped", skipped);
            argumentsOfScenario.Add("Product Bug", productBug);
            argumentsOfScenario.Add("Auto Bug", autoBug);
            argumentsOfScenario.Add("System Issue", systemIssue);
            argumentsOfScenario.Add("To Investigate", toInvestigate);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01 Correct test run data id displayed for Launch", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
 testRunner.Given(string.Format("I login as a \'{0}\' user to ReportPortal", user), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
 testRunner.When("I select \'Launches\' navigation menu option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Total",
                            "Passed",
                            "Failed",
                            "Skipped",
                            "Product Bug",
                            "Auto Bug",
                            "System Issue",
                            "To Investigate"});
                table1.AddRow(new string[] {
                            string.Format("{0}", total),
                            string.Format("{0}", passed),
                            string.Format("{0}", failed),
                            string.Format("{0}", skipped),
                            string.Format("{0}", productBug),
                            string.Format("{0}", autoBug),
                            string.Format("{0}", systemIssue),
                            string.Format("{0}", toInvestigate)});
#line 11
 testRunner.Then(string.Format("Launch with \'{0}\' name has data:", launchName), ((string)(null)), table1, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02 Correct information message is displayed for Launch")]
        [NUnit.Framework.CategoryAttribute("High")]
        [NUnit.Framework.CategoryAttribute("RP-16")]
        [NUnit.Framework.TestCaseAttribute("Admin", "Demo Api Tests#10", null)]
        [NUnit.Framework.TestCaseAttribute("Admin", "Demo Api Tests#8", null)]
        [NUnit.Framework.TestCaseAttribute("Admin", "Demo Api Tests#6", null)]
        [NUnit.Framework.TestCaseAttribute("Default", "Demo Api Tests#9", null)]
        [NUnit.Framework.TestCaseAttribute("Default", "Demo Api Tests#7", null)]
        public void _02CorrectInformationMessageIsDisplayedForLaunch(string user, string launchName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "High",
                    "RP-16"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("User", user);
            argumentsOfScenario.Add("Launch Name", launchName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02 Correct information message is displayed for Launch", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 25
 testRunner.Given(string.Format("I login as a \'{0}\' user to ReportPortal", user), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 26
 testRunner.When("I select \'Launches\' navigation menu option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Description"});
                table2.AddRow(new string[] {
                            "Demonstration launch."});
#line 27
 testRunner.Then(string.Format("Launch with \'{0}\' name has data:", launchName), ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
