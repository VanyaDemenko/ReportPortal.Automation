// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ReportPortal.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Launches Api Tests")]
    [NUnit.Framework.CategoryAttribute("Smoke")]
    [NUnit.Framework.CategoryAttribute("API")]
    public partial class LaunchesApiTestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "Smoke",
                "API"};
        
#line 1 "LaunchesApi.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Launches Api Tests", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01 User can get a list of existing launches for the project")]
        [NUnit.Framework.CategoryAttribute("Critical")]
        [NUnit.Framework.CategoryAttribute("RP-1")]
        [NUnit.Framework.TestCaseAttribute("Admin", "SUPERADMIN_PERSONAL", null)]
        [NUnit.Framework.TestCaseAttribute("Default", "DEFAULT_PERSONAL", null)]
        public void _01UserCanGetAListOfExistingLaunchesForTheProject(string user, string projectName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Critical",
                    "RP-1"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("User", user);
            argumentsOfScenario.Add("ProjectName", projectName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01 User can get a list of existing launches for the project", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
 testRunner.When(string.Format("I try to get a list of launches from \'{0}\' project using \'{1}\' user", projectName, user), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
 testRunner.Then("I should get a response with \'200\' status code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
 testRunner.And("I should get a valid list of launches", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02 User can\'t get a list of launches for the not existing project")]
        [NUnit.Framework.CategoryAttribute("High")]
        [NUnit.Framework.CategoryAttribute("RP-3")]
        [NUnit.Framework.TestCaseAttribute("Admin", null)]
        [NUnit.Framework.TestCaseAttribute("Default", null)]
        public void _02UserCantGetAListOfLaunchesForTheNotExistingProject(string user, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "High",
                    "RP-3"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("User", user);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02 User can\'t get a list of launches for the not existing project", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 20
 testRunner.When(string.Format("I try to get a list of launches from \'NOT_EXISTING_PROJECT\' project using \'{0}\' u" +
                            "ser", user), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
 testRunner.Then("I should get a response with \'403\' status code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "ErrorCode",
                            "Message"});
                table3.AddRow(new string[] {
                            "4003",
                            "You do not have enough permissions. Please check the list of your available proje" +
                                "cts."});
#line 22
 testRunner.And("I should get an error response with data:", ((string)(null)), table3, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03 User can create, stop and delete a launch for the project")]
        [NUnit.Framework.CategoryAttribute("Critical")]
        [NUnit.Framework.CategoryAttribute("RP-4")]
        [NUnit.Framework.TestCaseAttribute("Admin", "SUPERADMIN_PERSONAL", null)]
        [NUnit.Framework.TestCaseAttribute("Default", "DEFAULT_PERSONAL", null)]
        public void _03UserCanCreateStopAndDeleteALaunchForTheProject(string user, string projectName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Critical",
                    "RP-4"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("User", user);
            argumentsOfScenario.Add("ProjectName", projectName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03 User can create, stop and delete a launch for the project", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Description",
                            "Name",
                            "StartTime"});
                table4.AddRow(new string[] {
                            "Test",
                            "Test Launch",
                            "2023-05-17T09:00:00.000"});
#line 33
 testRunner.When(string.Format("I try to create a launch for \'{0}\' project using \'{1}\' user:", projectName, user), ((string)(null)), table4, "When ");
#line hidden
#line 36
 testRunner.Then("I should get a response with \'201\' status code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 38
 testRunner.When(string.Format("I remember id of newly added launch for \'{0}\' project as \'LaunchId\' variable usin" +
                            "g \'{1}\' user", projectName, user), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 39
 testRunner.Then(string.Format("I verify that list of launches contains launch with \'LaunchId\' id for \'{0}\' proje" +
                            "ct using \'{1}\' user", projectName, user), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Description",
                            "Name",
                            "Status"});
                table5.AddRow(new string[] {
                            "Test",
                            "Test Launch",
                            "IN_PROGRESS"});
#line 40
 testRunner.And(string.Format("I verify that the launch with \'LaunchId\' id for \'{0}\' project contains data using" +
                            " \'{1}\' user:", projectName, user), ((string)(null)), table5, "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "endTime"});
                table6.AddRow(new string[] {
                            "2023-05-17T09:01:00.000"});
#line 44
 testRunner.When(string.Format("I stop the launch with \'LaunchId\' id for \'{0}\' project using \'{1}\' user:", projectName, user), ((string)(null)), table6, "When ");
#line hidden
#line 47
 testRunner.Then("I should get a response with \'200\' status code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Description",
                            "Name",
                            "Status"});
                table7.AddRow(new string[] {
                            "Test stopped",
                            "Test Launch",
                            "STOPPED"});
#line 48
 testRunner.And(string.Format("I verify that the launch with \'LaunchId\' id for \'{0}\' project contains data using" +
                            " \'{1}\' user:", projectName, user), ((string)(null)), table7, "And ");
#line hidden
#line 52
 testRunner.When(string.Format("I delete the launch with \'LaunchId\' id for \'{0}\' project using \'{1}\' user", projectName, user), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
 testRunner.Then("I should get a response with \'200\' status code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
 testRunner.And(string.Format("I verify that list of launches doesn\'t contain launch with \'LaunchId\' id for \'{0}" +
                            "\' project using \'{1}\' user", projectName, user), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04 User can\'t create a launch with a wrong data for the project")]
        [NUnit.Framework.CategoryAttribute("Critical")]
        [NUnit.Framework.CategoryAttribute("RP-5")]
        [NUnit.Framework.TestCaseAttribute("Admin", "SUPERADMIN_PERSONAL", null)]
        [NUnit.Framework.TestCaseAttribute("Default", "DEFAULT_PERSONAL", null)]
        public void _04UserCantCreateALaunchWithAWrongDataForTheProject(string user, string projectName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Critical",
                    "RP-5"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("User", user);
            argumentsOfScenario.Add("ProjectName", projectName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04 User can\'t create a launch with a wrong data for the project", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 62
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Description",
                            "Name",
                            "StartTime"});
                table8.AddRow(new string[] {
                            "Test",
                            "Test Launch",
                            ""});
#line 63
 testRunner.When(string.Format("I try to create a launch for \'{0}\' project using \'{1}\' user:", projectName, user), ((string)(null)), table8, "When ");
#line hidden
#line 66
 testRunner.Then("I should get a response with \'400\' status code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "ErrorCode",
                            "Message"});
                table9.AddRow(new string[] {
                            "4001",
                            "Incorrect Request. [Field \'startTime\' should not be null.]"});
#line 67
 testRunner.And("I should get an error response with data:", ((string)(null)), table9, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("05 User can\'t create a launch for not existing project")]
        [NUnit.Framework.CategoryAttribute("Critical")]
        [NUnit.Framework.CategoryAttribute("RP-6")]
        [NUnit.Framework.TestCaseAttribute("Admin", "You do not have enough permissions. Please check the list of your available proje" +
            "cts.", null)]
        [NUnit.Framework.TestCaseAttribute("Default", "You do not have enough permissions.", null)]
        public void _05UserCantCreateALaunchForNotExistingProject(string user, string message, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Critical",
                    "RP-6"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("User", user);
            argumentsOfScenario.Add("Message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("05 User can\'t create a launch for not existing project", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 77
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Description",
                            "Name",
                            "StartTime"});
                table10.AddRow(new string[] {
                            "Test",
                            "Test Launch",
                            "2023-05-17T09:00:00.000"});
#line 78
 testRunner.When(string.Format("I try to create a launch for \'NOT_EXISTING_PROJECT\' project using \'{0}\' user:", user), ((string)(null)), table10, "When ");
#line hidden
#line 81
 testRunner.Then("I should get a response with \'403\' status code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "ErrorCode",
                            "Message"});
                table11.AddRow(new string[] {
                            "4003",
                            string.Format("{0}", message)});
#line 82
 testRunner.And("I should get an error response with data:", ((string)(null)), table11, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("06 User can\'t delete the launch from not existing project")]
        [NUnit.Framework.CategoryAttribute("Critical")]
        [NUnit.Framework.CategoryAttribute("RP-7")]
        [NUnit.Framework.TestCaseAttribute("Admin", "You do not have enough permissions. Please check the list of your available proje" +
            "cts.", null)]
        [NUnit.Framework.TestCaseAttribute("Default", "You do not have enough permissions.", null)]
        public void _06UserCantDeleteTheLaunchFromNotExistingProject(string user, string message, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Critical",
                    "RP-7"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("User", user);
            argumentsOfScenario.Add("Message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("06 User can\'t delete the launch from not existing project", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 92
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 93
 testRunner.When(string.Format("I delete the launch with \'1\' id for \'NOT_EXISTING_PROJECT\' project using \'{0}\' us" +
                            "er", user), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 94
 testRunner.Then("I should get a response with \'403\' status code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "ErrorCode",
                            "Message"});
                table12.AddRow(new string[] {
                            "4003",
                            string.Format("{0}", message)});
#line 95
 testRunner.And("I should get an error response with data:", ((string)(null)), table12, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("07 User can\'t stop the launch from not existing project")]
        [NUnit.Framework.CategoryAttribute("Critical")]
        [NUnit.Framework.CategoryAttribute("RP-8")]
        [NUnit.Framework.TestCaseAttribute("Admin", "You do not have enough permissions. Please check the list of your available proje" +
            "cts.", null)]
        [NUnit.Framework.TestCaseAttribute("Default", "You do not have enough permissions.", null)]
        public void _07UserCantStopTheLaunchFromNotExistingProject(string user, string message, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Critical",
                    "RP-8"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("User", user);
            argumentsOfScenario.Add("Message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("07 User can\'t stop the launch from not existing project", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 105
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "endTime"});
                table13.AddRow(new string[] {
                            "2023-05-17T09:01:00.000"});
#line 106
 testRunner.When(string.Format("I stop the launch with \'1\' id for \'NOT_EXISTING_PROJECT\' project using \'{0}\' user" +
                            ":", user), ((string)(null)), table13, "When ");
#line hidden
#line 109
 testRunner.Then("I should get a response with \'403\' status code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "ErrorCode",
                            "Message"});
                table14.AddRow(new string[] {
                            "4003",
                            string.Format("{0}", message)});
#line 110
 testRunner.And("I should get an error response with data:", ((string)(null)), table14, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("08 User can\'t stop the stopped launch for the project")]
        [NUnit.Framework.CategoryAttribute("High")]
        [NUnit.Framework.CategoryAttribute("RP-9")]
        [NUnit.Framework.TestCaseAttribute("Admin", "SUPERADMIN_PERSONAL", null)]
        [NUnit.Framework.TestCaseAttribute("Default", "DEFAULT_PERSONAL", null)]
        public void _08UserCantStopTheStoppedLaunchForTheProject(string user, string projectName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "High",
                    "RP-9"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("User", user);
            argumentsOfScenario.Add("ProjectName", projectName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("08 User can\'t stop the stopped launch for the project", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 120
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Description",
                            "Name",
                            "StartTime"});
                table15.AddRow(new string[] {
                            "Test",
                            "Test Launch",
                            "2023-05-17T09:00:00.000"});
#line 121
 testRunner.When(string.Format("I try to create a launch for \'{0}\' project using \'{1}\' user:", projectName, user), ((string)(null)), table15, "When ");
#line hidden
#line 124
 testRunner.And(string.Format("I remember id of newly added launch for \'{0}\' project as \'LaunchId\' variable usin" +
                            "g \'{1}\' user", projectName, user), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "endTime"});
                table16.AddRow(new string[] {
                            "2023-05-17T09:01:00.000"});
#line 125
 testRunner.And(string.Format("I stop the launch with \'LaunchId\' id for \'{0}\' project using \'{1}\' user:", projectName, user), ((string)(null)), table16, "And ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "endTime"});
                table17.AddRow(new string[] {
                            "2023-05-17T09:01:00.000"});
#line 128
 testRunner.And(string.Format("I stop the launch with \'LaunchId\' id for \'{0}\' project using \'{1}\' user:", projectName, user), ((string)(null)), table17, "And ");
#line hidden
#line 131
 testRunner.Then("I should get a response with \'406\' status code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 132
 testRunner.When(string.Format("I delete the launch with \'LaunchId\' id for \'{0}\' project using \'{1}\' user", projectName, user), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("09 User can\'t get info for the deleted launch from the project")]
        [NUnit.Framework.CategoryAttribute("High")]
        [NUnit.Framework.CategoryAttribute("RP-10")]
        [NUnit.Framework.TestCaseAttribute("Admin", "SUPERADMIN_PERSONAL", null)]
        [NUnit.Framework.TestCaseAttribute("Default", "DEFAULT_PERSONAL", null)]
        public void _09UserCantGetInfoForTheDeletedLaunchFromTheProject(string user, string projectName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "High",
                    "RP-10"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("User", user);
            argumentsOfScenario.Add("ProjectName", projectName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("09 User can\'t get info for the deleted launch from the project", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 140
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Description",
                            "Name",
                            "StartTime"});
                table18.AddRow(new string[] {
                            "Test",
                            "Test Launch",
                            "2023-05-17T09:00:00.000"});
#line 141
 testRunner.When(string.Format("I try to create a launch for \'{0}\' project using \'{1}\' user:", projectName, user), ((string)(null)), table18, "When ");
#line hidden
#line 144
 testRunner.When(string.Format("I remember id of newly added launch for \'{0}\' project as \'LaunchId\' variable usin" +
                            "g \'{1}\' user", projectName, user), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "endTime"});
                table19.AddRow(new string[] {
                            "2023-05-17T09:01:00.000"});
#line 145
 testRunner.When(string.Format("I stop the launch with \'LaunchId\' id for \'{0}\' project using \'{1}\' user:", projectName, user), ((string)(null)), table19, "When ");
#line hidden
#line 148
 testRunner.When(string.Format("I delete the launch with \'LaunchId\' id for \'{0}\' project using \'{1}\' user", projectName, user), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 149
 testRunner.When(string.Format("I try to get info for launch with \'LaunchId\' id for \'{0}\' project using \'{1}\' use" +
                            "r", projectName, user), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 150
 testRunner.Then("I should get a response with \'404\' status code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
